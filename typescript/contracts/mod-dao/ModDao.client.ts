/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Status, ProposalStatusMatches, Binary, QueryResponseForBinary } from "./ModDao.types";
export interface ModDaoReadOnlyInterface {
  contractAddress: string;
  proposalStatusMatches: ({
    daoAddress,
    proposalId,
    status
  }: {
    daoAddress: string;
    proposalId: number;
    status: Status;
  }) => Promise<QueryResponseForBinary>;
  hasPassedProposals: ({
    daoAddress
  }: {
    daoAddress: string;
  }) => Promise<QueryResponseForBinary>;
  hasPassedProposalWithMigration: ({
    daoAddress
  }: {
    daoAddress: string;
  }) => Promise<QueryResponseForBinary>;
  hasProposalsGtId: ({
    daoAddress,
    value
  }: {
    daoAddress: string;
    value: number;
  }) => Promise<QueryResponseForBinary>;
}
export class ModDaoQueryClient implements ModDaoReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.proposalStatusMatches = this.proposalStatusMatches.bind(this);
    this.hasPassedProposals = this.hasPassedProposals.bind(this);
    this.hasPassedProposalWithMigration = this.hasPassedProposalWithMigration.bind(this);
    this.hasProposalsGtId = this.hasProposalsGtId.bind(this);
  }

  proposalStatusMatches = async ({
    daoAddress,
    proposalId,
    status
  }: {
    daoAddress: string;
    proposalId: number;
    status: Status;
  }): Promise<QueryResponseForBinary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      proposal_status_matches: {
        dao_address: daoAddress,
        proposal_id: proposalId,
        status
      }
    });
  };
  hasPassedProposals = async ({
    daoAddress
  }: {
    daoAddress: string;
  }): Promise<QueryResponseForBinary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      has_passed_proposals: {
        dao_address: daoAddress
      }
    });
  };
  hasPassedProposalWithMigration = async ({
    daoAddress
  }: {
    daoAddress: string;
  }): Promise<QueryResponseForBinary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      has_passed_proposal_with_migration: {
        dao_address: daoAddress
      }
    });
  };
  hasProposalsGtId = async ({
    daoAddress,
    value
  }: {
    daoAddress: string;
    value: number;
  }): Promise<QueryResponseForBinary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      has_proposals_gt_id: {
        dao_address: daoAddress,
        value
      }
    });
  };
}