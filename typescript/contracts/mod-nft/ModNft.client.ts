/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { InstantiateMsg, ExecuteMsg, QueryMsg, OwnerOfNft, Binary, QueryResponseForBinary } from "./ModNft.types";
export interface ModNftReadOnlyInterface {
  contractAddress: string;
  ownerOfNft: ({
    address,
    nftAddress,
    tokenId
  }: {
    address: string;
    nftAddress: string;
    tokenId: string;
  }) => Promise<QueryResponseForBinary>;
  addrHasNft: ({
    address,
    nftAddress
  }: {
    address: string;
    nftAddress: string;
  }) => Promise<QueryResponseForBinary>;
}
export class ModNftQueryClient implements ModNftReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownerOfNft = this.ownerOfNft.bind(this);
    this.addrHasNft = this.addrHasNft.bind(this);
  }

  ownerOfNft = async ({
    address,
    nftAddress,
    tokenId
  }: {
    address: string;
    nftAddress: string;
    tokenId: string;
  }): Promise<QueryResponseForBinary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner_of_nft: {
        address,
        nft_address: nftAddress,
        token_id: tokenId
      }
    });
  };
  addrHasNft = async ({
    address,
    nftAddress
  }: {
    address: string;
    nftAddress: string;
  }): Promise<QueryResponseForBinary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      addr_has_nft: {
        address,
        nft_address: nftAddress
      }
    });
  };
}